    Python Course: From Basics to Advanced
    1. Introduction to Python
              Python is a high-level, interpreted programming language known for its readability and simplicity. 
              It allows developers to write clean and easy-to-understand code. In this course, we will cover Python's syntax, features, and how to use them in real-world programming scenarios.

    2. Python Variables and Data Types
    In Python, variables are used to store data values. Python has various data types to represent different kinds of data.

    String: A sequence of characters enclosed in quotes (" " or ' ').
    Integer: A whole number.
    Float: A number with a decimal point.
    Boolean: A data type that can either be True or False.
    python

    # Examples of variables and data types
    name = "Alice"      # String
    age = 30            # Integer
    height = 5.7        # Float
    is_active = True    # Boolean

    # Printing variable values
    print(name)         # Output: Alice
    print(age)          # Output: 30
    3. Python Operators
    Operators allow us to perform operations on variables and values. Python has several types of operators, including arithmetic, comparison, and logical operators.

    python
    # Arithmetic Operators
    x = 10
    y = 3
    print(x + y)  # Addition
    print(x - y)  # Subtraction
    print(x * y)  # Multiplication
    print(x / y)  # Division

    # Comparison Operators
    print(x == y)  # Equal to
    print(x != y)  # Not equal to
    print(x > y)   # Greater than
    4. Conditional Statements (if, else, elif)
    Conditional statements allow us to execute certain blocks of code based on conditions.

    python
    age = 20

    if age >= 18:
        print("You are an adult.")
    else:
        print("You are a minor.")
    The elif statement allows checking multiple conditions:

    python
    if age < 13:
        print("Child")
    elif age < 20:
        print("Teenager")
    else:
        print("Adult")
    5. Python Loops (for, while)
    Loops are used to execute a block of code repeatedly.

    for loop: Iterates over a sequence (e.g., a list, tuple, string, or range).
    while loop: Executes as long as a given condition is True.
    python
    # For Loop
    for i in range(5):
        print(i)

    # While Loop
    count = 0
    while count < 5:
        print(count)
        count += 1
    6. Functions
    Functions in Python are used to organize and reuse code. A function is defined using the def keyword.

    python
    # Function with parameters
    def greet(name):
        print(f"Hello, {name}!")

    greet("Bob")  # Calling the function

    # Function with return value
    def add(a, b):
        return a + b

    result = add(10, 5)
    print(result)  # Output: 15
    7. Data Structures: Lists, Tuples, and Dictionaries
    Python provides built-in data structures like lists, tuples, and dictionaries to store multiple items in a single variable.

    Lists are ordered and mutable collections.
    Tuples are ordered and immutable collections.
    Dictionaries store key-value pairs.
    python
    Copy code
    # List
    fruits = ["apple", "banana", "cherry"]
    print(fruits[0])  # Access by index

    # Tuple
    coordinates = (10, 20, 30)
    print(coordinates[1])  # Access by index

    # Dictionary
    person = {"name": "Alice", "age": 25}
    print(person["name"])  # Access by key
    8. List Comprehensions
    List comprehensions provide a concise way to create lists.

    python
    # Basic list comprehension
    squares = [x**2 for x in range(5)]
    print(squares)  # Output: [0, 1, 4, 9, 16]

    # List comprehension with condition
    even_squares = [x**2 for x in range(5) if x % 2 == 0]
    print(even_squares)  # Output: [0, 4, 16]
    9. String Manipulation
    Strings are sequences of characters, and Python provides various methods to manipulate strings.

    python
    text = "Hello, Python!"

    # String slicing
    print(text[0:5])  # Output: Hello

    # String methods
    print(text.lower())  # Output: hello, python!
    print(text.upper())  # Output: HELLO, PYTHON!
    print(text.replace("Python", "World"))  # Output: Hello, World!
    10. Exception Handling
    Python provides a way to handle errors using try, except, else, and finally blocks.

    python
    try:
        result = 10 / 0
    except ZeroDivisionError:
        print("Cannot divide by zero!")
    else:
        print("Division successful!")
    finally:
        print("This will always execute.")
    11. Object-Oriented Programming (OOP)
    OOP is a programming paradigm based on the concept of objects. Python supports OOP and allows us to define classes and create objects.

    python
    # Define a class
    class Person:
        def __init__(self, name, age):
            self.name = name
            self.age = age

        def greet(self):
            print(f"Hello, my name is {self.name}.")

    # Create an object (instance of the class)
    person1 = Person("Alice", 25)
    person1.greet()  # Output: Hello, my name is Alice.
    12. Inheritance
    Inheritance allows a class to inherit attributes and methods from another class.

    python
    # Parent class
    class Animal:
        def speak(self):
            print("Animal speaks")

    # Child class
    class Dog(Animal):
        def bark(self):
            print("Dog barks")

    dog = Dog()
    dog.speak()  # Inherited method
    dog.bark()   # Child method
    13. File Handling
    Python allows reading and writing files using built-in functions.

    python
    # Writing to a file
    with open("sample.txt", "w") as file:
        file.write("Hello, Python!\n")

    # Reading from a file
    with open("sample.txt", "r") as file:
        content = file.read()
        print(content)
    14. Python Modules
    A module is a file containing Python definitions and statements. You can use built-in modules like math, os, etc., or create your own.

    python
    # Importing a module
    import math
    print(math.sqrt(16))  # Output: 4.0

    # Using a custom module
    # Assume a file named mymodule.py with the function add(a, b)
    # import mymodule
    # print(mymodule.add(5, 3))
    15. Working with External Libraries
    You can install and use external libraries in Python using pip, Python's package manager.

    bash
    # Install a package (e.g., numpy)
    pip install numpy
    Then, import and use the library:

    python
    import numpy as np
    arr = np.array([1, 2, 3])
    print(arr)
    16. Advanced Topics: Decorators and Generators
    Decorators: Functions that modify the behavior of other functions.
    Generators: Functions that return an iterable sequence of values using the yield keyword.
    python
    # Decorator
    def decorator(func):
        def wrapper():
            print("Before function call")
            func()
            print("After function call")
        return wrapper

    @decorator
    def greet():
        print("Hello!")

    greet()

    # Generator
    def countdown(n):
        while n > 0:
            yield n
            n -= 1

    for i in countdown(5):
        print(i)
    17. Conclusion
    Python is a versatile language that supports both simple and complex applications. With its rich set of libraries and tools, it is suitable for web development, data analysis, machine learning, automation, and more.

    This course has covered the basics, including variables, data types, control flow, and functions, and also introduced object-oriented programming and advanced topics like decorators and generators. Keep exploring and building to become proficient in Python